#+hugo_base_dir: .
#+seq_todo: TODO(t) DRAFT(d) | PUBLISHED(p)
#+property: header-args :eval never-export
#+startup: indent


:PROPERTIES:
:EXPORT_HUGO_SECTION:
:END:

* PUBLISHED Test Post :test:foo:
SCHEDULED: <2020-06-07 Sun>
:PROPERTIES:
:EXPORT_FILE_NAME: test-post
:END:
This is a test post to see how well this works.

What if I add some code...
#+BEGIN_SRC bash
ripgrep something
#+END_SRC
* PUBLISHED The Craziest Terraform ~for_each~ I've Ever Written :terraform:dry:
SCHEDULED: <2020-06-10 Wed>
:PROPERTIES:
:EXPORT_FILE_NAME: terraform-for-each
:END:
:LOGBOOK:
CLOCK: [2020-06-10 Wed 20:10]--[2020-06-10 Wed 21:41] =>  1:31
:END:
    Today I set out on a mission to refactor some code that has been bothering me for some time. The verbosity of terraform code often often bothers me and I /always/ look for opportunities to [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]] up my code. The particular code of interest here is deploying multiple instances of virtual machines into multiple resource groups in Azure.

    The first iteration looked something similar to the following.

    #+BEGIN_SRC terraform
resource "azurerm_linux_virtual_machine" "myvm" {
  count               = var.number_of_instances
  name                = "myvm-${count.index}"
  resource_group_name = data.azurerm_resource_group.resource_group1.name
  location            = data.azurerm_resource_group.resource_group1.location
  ...
}

resource "azurerm_linux_virtual_machine" "myvm" {
  count               = var.number_of_instances
  name                = "myvm-${count.index}"
  resource_group_name = data.azurerm_resource_group.resource_group2.name
  location            = data.azurerm_resource_group.resource_group2.location
  ...
}
    #+END_SRC

    And this worked, but it's painful. Painful to update, painful to look at and painful to maintain. The first part of this refactor is to get something to iterate over.

    #+BEGIN_SRC terraform
locals {
  resource_groups = {
    rg1 = data.azurerm_resource_group.resource_group1
    rg2 = data.azurerm_resource_group.resource_group2
  }
}
    #+END_SRC

    And of course iterating over creates a single vm in each location.

    #+BEGIN_SRC terraform
resource "azurerm_linux_virtual_machine" "myvm" {
  for_each            = local.resource_groups
  name                = "myvm-${each.key}"
  resource_group_name = each.value.name
  location            = each.value.location
  ...
}
    #+END_SRC

    And this is great, but it only create 2 servers. Of course, you cannot use ~for_each~ and ~count~ together in the same resource. My first thought was to extract the resource to a module and use ~for_each~ on the module passing a ~count~ variable. This also does not work as ~for_each~ and ~count~ are reserved for use only on resources and will not work with modules.

    So what I needed was a data structure that I could iterate over with ~for_each~ that took into account the number of instances that I needed and the number of resource group locations that I have. To get the total number of instances I needed something that multiplied the number of locations by the number of instances asked for.

    #+BEGIN_SRC terraform
locals {
  resource_group_keys = keys(local.resource_groups)
  number_locations    = length(local.resource_group_keys)
  total_instances     = local.number_locations * var.number_of_instances
}
    #+END_SRC

    Fortunately, terraform has many built in functions to aid in building up the data structure. [[https://www.terraform.io/docs/configuration/functions/keys.html][~keys~]] iterates over a Map and returns a List of all keys which is then passed to [[https://www.terraform.io/docs/configuration/functions/length.html][~length~]] to get a count of 2 in this case. The builtin multiplication function is then used to get a total number of instances. So if ~number_of_instances~ is set to 4 it will build 8 total instances, 4 in each resource group.

    Now building up the data structure to iterate over is a little more involved.

    #+BEGIN_SRC terraform
resource "azurerm_linux_virtual_machine" "my-vm" {
  for_each = {
    for num in range(local.total_instances) : tostring(num) => {
      lookup                  = local.resource_group_keys[(num % local.number_locations)]
      resource_group_location = local.resource_groups[local.resource_group_keys[(num % local.number_locations)]].name
      resource_group_name     = local.resource_groups[local.resource_group_keys[(num % local.number_locations)]].location
      name                    = format("my-vm-%s-%s", local.resource_group_keys[(num % local.number_locations)], num > local.number_instances ? ((num + 1) / local.number_locations) : num)
    }
  }
    #+END_SRC

    There is a lot going on here so let's unpack it.

    #+BEGIN_SRC terraform
    for num in range(local.total_instances) : tostring(num) => {}
    #+END_SRC

    The ~for x in List : x => {}~ allows iteration over the list returning a new Map with a ~x~ as the key and the empty Map as the value. The [[https://www.terraform.io/docs/configuration/functions/range.html][~range~]] function return a List expanding the numbers by the provided value. Going with 4 instances, this returns ~[0, 1, 2, 3, 4, 5, 6, 7]~ which is collected into a new Map with the stringified number as the key.

    #+BEGIN_SRC terraform
{
  "0" = {}
  "1" = {}
  "2" = {}
  "3" = {}
  "4" = {}
  "5" = {}
  "6" = {}
  "7" = {}
}
    #+END_SRC

    Looking at the vm resource from the Azure Provider, the information that is needed to iterate over is the resource group name, resource group location and each vm needs a unique name. A value is also needed to lookup any resources that were previously created by using ~for_each~ with the ~resource_groups~ local. So building out each part of that data structure into the Map goes like this.

    #+BEGIN_SRC terraform
      lookup = local.resource_group_keys[(num % local.number_locations)]
    #+END_SRC

    ~local.resource_group_keys~ is a List of the keys realting to the resource group data objects. In this case it's value is ~["rg1", "rg2"]. Lists are like normal Arrays in that they are zero indexed and values are retrived by index. Given 2 values, indicies are 0 and 1, and with a little [[https://en.wikipedia.org/wiki/Modulo_operation][modulo math]] with return a 0 or a 1.

    #+BEGIN_SRC terraform
0 % 2 => 0
1 % 2 => 1
4 % 2 => 0
    #+END_SRC

    So after this line, the data structure looks like this.

    #+BEGIN_SRC terraform
{
  "0" = {
    lookup = "rg1"
  }
  "1" = {
    lookup = "rg2"
  }
  "2" = {
    lookup = "rg1"
  }
  "3" = {
    lookup = "rg2"
  }
  "4" = {
    lookup = "rg1"
  }
  "5" = {
    lookup = "rg2"
  }
  "6" = {
    lookup = "rg1"
  }
  "7" = {
    lookup = "rg2"
  }
}
    #+END_SRC

    The next two lines set the information for the resource group using the exact same logic of List indicies, modulo math and getting a Map value by key. ~(num % local.number_locations)~ returns a 1 or a 0 to grab the correct key from the List ~local.resource_group_keys~ which is then used to the data object from the Map ~local.resource_groups~ by key.

    #+BEGIN_SRC terraform
resource_group_location = local.resource_groups[local.resource_group_keys[(num % local.number_locations)]].name
resource_group_name     = local.resource_groups[local.resource_group_keys[(num % local.number_locations)]].location
    #+END_SRC

    The data structure now looks as follows.

    #+BEGIN_SRC terraform
{
  "0" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
  }
  "1" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
  }
  "2" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
  }
  "3" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
  }
  "4" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
  }
  "5" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
  }
  "6" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
  }
  "7" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
  }
}
    #+END_SRC

    Last up is the name key which is used for generating a unique resource name which is also used to set the vm hostname. The [[https://www.terraform.io/docs/configuration/functions/format.html][~format~]] function has the string to be formatted with two values. The first is the lookup key accessed in the same way as above since ~self~ is not supported here. Not wanting hostnames to have 0, 2, 4, 6 in one resource group and 1, 3, 5, 7 in the other, a ternary is used to check when the loop gets over the number of required instances, dividing it by the number of locations to get back the correct values.

    #+BEGIN_SRC terraform
name = format("my-vm-%s-%s", local.resource_group_keys[(num % local.number_locations)], num >= (local.number_instances - 1) ? ((num + 1) / local.number_locations) : num)
    #+END_SRC

    The final data structure is.

    #+BEGIN_SRC terraform
{
  "0" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
    name                    = "mv-vm-eastus2-0"
  }
  "1" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
    name                    = "mv-vm-centralus-0"
  }
  "2" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
    name                    = "mv-vm-eastus2-1"
  }
  "3" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
    name                    = "mv-vm-centralus-1"
  }
  "4" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
    name                    = "mv-vm-eastus2-2"
  }
  "5" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
    name                    = "mv-vm-centralus-2"
  }
  "6" = {
    lookup                  = "rg1"
    resource_group_location = "eastus2"
    resource_group_name     = "rg1"
    name                    = "mv-vm-eastus2-3"
  }
  "7" = {
    lookup                  = "rg2"
    resource_group_location = "centralus"
    resource_group_name     = "rg2"
    name                    = "mv-vm-centralus-3"
  }
}
    #+END_SRC

    Looping through this now provides the required number of the vm reource in each resource group.

    #+BEGIN_SRC terraform
resource "azurerm_linux_virtual_machine" "my-vm" {
  for_each = {...}
  resource_group_location = each.value.resource_group_location
  resource_group_name     = each.value.resource_group_name
  name                    = each.value.name
}
    #+END_SRC
* PUBLISHED Loaf of The Week :bread:recipe:
SCHEDULED: <2020-06-19 Fri>
:PROPERTIES:
:EXPORT_FILE_NAME: loaf-19-JUN-20
:END:
- Whole Wheat Flour = 50%
- Buckwheat Flour   = 5%
- Oat Flour         = 5%
- Bread Flour       = 40%
- Water             = 75%
- Salt              = 2%
- Yeast             = 1.5%
- Honey             = 10%

Saw a video where someone mentioned Buckwheat Flour and I wanted to try a loaf. I also did an egg wash on these which I usually don't do. The crumb is very open, moist and flavorful. The crust is amazingly crisp and the loaf is full of flavor.
* About
:PROPERTIES:
:EXPORT_HUGO_SECTION:
:EXPORT_FILE_NAME: about
:END:
** About me
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
